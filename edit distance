def edit_distance(str1, str2):
    m, n = len(str1), len(str2)
    
    # Create a (m+1) x (n+1) matrix
    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
    
    # Initialize the base cases
    for i in range(m + 1):
        dp[i][0] = i  # Deleting all characters from str1
    for j in range(n + 1):
        dp[0][j] = j  # Inserting all characters into str1
    
    # Fill the matrix using bottom-up approach
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]  # Characters match, no cost
            else:
                dp[i][j] = 1 + min(
                    dp[i - 1][j],    # Deletion
                    dp[i][j - 1],    # Insertion
                    dp[i - 1][j - 1] # Substitution
                )
    
    return dp[m][n]  # Final answer at dp[m][n]

# Example usage
str1 = "kitten"
str2 = "sitting"
print(f"Edit Distance between '{str1}' and '{str2}':", edit_distance(str1, str2))
